source("D:/Kaggle/composite-global/calculate-composite/app.R")
# Define server logic
server <- function(input, output) {
# Read data from uploaded file
data <- reactive({
req(input$file)
df <- read.csv(input$file$datapath)
return(df)
})
# Dynamically create checkboxes for column selection
output$checkboxes <- renderUI({
colnames <- names(data())
checkboxGroupInput("columns", "Select Columns", choices = colnames)
})
# Perform PCA and display loadings
output$loadings <- renderPrint({
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
return("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
loadings
})
# Modify data and allow download
output$downloadData <- downloadHandler(
filename = function() {
"modified_data.csv"
},
content = function(file) {
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
stop("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
data_with_global <- mutate(data(), Global = rowSums(sweep(scaled_data, 2, loadings, "*")))
write.csv(data_with_global, file, row.names = FALSE)
}
)
}
# Define server logic
server <- function(input, output) {
# Read data from uploaded file
data <- reactive({
req(input$file)
df <- read.csv(input$file$datapath)
return(df)
})
# Dynamically create checkboxes for column selection
output$checkboxes <- renderUI({
colnames <- names(data())
checkboxGroupInput("columns", "Select Columns", choices = colnames)
})
# Perform PCA and display loadings
output$loadings <- renderPrint({
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
return("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
loadings
})
# Modify data and allow download
output$downloadData <- downloadHandler(
filename = function() {
"modified_data.csv"
},
content = function(file) {
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
stop("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
data_with_global <- mutate(data(), Global = rowSums(sweep(scaled_data, 2, loadings, "*")))
write.csv(data_with_global, file, row.names = FALSE)
}
)
}
source("D:/Kaggle/composite-global/calculate-composite/app.R")
source("D:/Kaggle/composite-global/calculate-composite/app.R", echo=TRUE)
source("D:/Kaggle/composite-global/calculate-composite/app.R", echo=TRUE)
source("D:/Kaggle/composite-global/calculate-composite/app.R", echo=TRUE)
runApp('D:/Kaggle/composite-global/check')
library(shiny)
library(dplyr)
library(readr)
# Define UI
ui <- fluidPage(
titlePanel("PCA Analysis"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
uiOutput("checkboxes"),
downloadButton("downloadData", "Download Modified Data")
),
mainPanel(
verbatimTextOutput("loadings")
)
)
)
# Define server logic
server <- function(input, output) {
# Read data from uploaded file
data <- reactive({
req(input$file)
df <- read.csv(input$file$datapath)
return(df)
})
# Dynamically create checkboxes for column selection
output$checkboxes <- renderUI({
colnames <- names(data())
checkboxGroupInput("columns", "Select Columns", choices = colnames)
})
# Perform PCA and display loadings
output$loadings <- renderPrint({
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
return("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
loadings
})
# Modify data and allow download
output$downloadData <- downloadHandler(
filename = function() {
"modified_data.csv"
},
content = function(file) {
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
stop("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
data_with_global <- mutate(data(), Global = rowSums(sweep(scaled_data, 2, loadings, "*")))
write.csv(data_with_global, file, row.names = FALSE)
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(dplyr)
library(readr)
# Define UI
ui <- fluidPage(
titlePanel("PCA Analysis"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
uiOutput("checkboxes"),
downloadButton("downloadData", "Download Modified Data")
),
mainPanel(
verbatimTextOutput("loadings")
)
)
)
# Define server logic
server <- function(input, output) {
# Read data from uploaded file
data <- reactive({
req(input$file)
df <- read.csv(input$file$datapath)
return(df)
})
# Dynamically create checkboxes for column selection
output$checkboxes <- renderUI({
colnames <- names(data())
checkboxGroupInput("columns", "Select Columns", choices = colnames)
})
# Perform PCA and display loadings
output$loadings <- renderPrint({
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
return("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
loadings
})
# Modify data and allow download
output$downloadData <- downloadHandler(
filename = function() {
"modified_data.csv"
},
content = function(file) {
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
stop("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
data_with_global <- mutate(data(), Global = rowSums(sweep(scaled_data, 2, loadings, "*")))
write.csv(data_with_global, file, row.names = FALSE)
}
)
}
library(shiny)
library(dplyr)
library(readr)
# Define UI
ui <- fluidPage(
titlePanel("PCA Analysis"),
sidebarLayout(
sidebarPanel(
fileInput("file", "Choose CSV File"),
uiOutput("checkboxes"),
downloadButton("downloadData", "Download Modified Data")
),
mainPanel(
verbatimTextOutput("loadings")
)
)
)
# Define server logic
server <- function(input, output) {
# Read data from uploaded file
data <- reactive({
req(input$file)
df <- read.csv(input$file$datapath)
return(df)
})
# Dynamically create checkboxes for column selection
output$checkboxes <- renderUI({
colnames <- names(data())
checkboxGroupInput("columns", "Select Columns", choices = colnames)
})
# Perform PCA and display loadings
output$loadings <- renderPrint({
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
return("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
loadings
})
# Modify data and allow download
output$downloadData <- downloadHandler(
filename = function() {
"modified_data.csv"
},
content = function(file) {
req(input$columns)
sub_data <- data() %>%
select(input$columns)
# Check for missing values
if (any(is.na(sub_data))) {
stop("Error: Missing values detected in selected columns.")
}
scaled_data <- scale(sub_data)
pca <- prcomp(scaled_data, center = FALSE, scale. = FALSE)
loadings <- pca$rotation[, 1]
data_with_global <- mutate(data(), Global = rowSums(sweep(scaled_data, 2, loadings, "*")))
write.csv(data_with_global, file, row.names = FALSE)
}
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
